<?xml version="1.0" ?><component loc="22:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc" nicename="tos.platforms.mica.CounterMicro32C" qname="CounterMicro32C">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
        <short>
 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>
 32-bit microsecond Counter component as per TEP102 HAL guidelines. The
 mica family microsecond clock is built on hardware timer 3, and actually
 runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() 
 command to figure out the exact frequency.

 @author David Gay &lt;dgay@intel-research.net&gt;
</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="33:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
          <from><interface-ref name="Counter" ref="0x2ace833d2188" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x2ace8346fc50" scoped=""/></to>
        </wire>
        <wire loc="34:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc">
          <from><interface-ref name="CounterFrom" ref="0x2ace8346ce20" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x2ace833cd020" scoped=""/></to>
        </wire>
      </wiring>
    <specification><interface loc="24:/opt/tinyos-2.1.2/tos/platforms/mica/CounterMicro32C.nc" name="Counter" provided="1" ref="0x2ace833d2188">
      <component-ref nicename="tos.platforms.mica.CounterMicro32C" qname="CounterMicro32C"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Counter" ref="0x2ace833d2188" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TMicro" ref="0x2ace81a46788"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x2ace810e1608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2ace833d1020" scoped=""/>
        <function-ref name="clearOverflow" ref="0x2ace833d1930" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x2ace833d14a8" scoped=""/>
        <function-ref name="overflow" ref="0x2ace833d1db8" scoped=""/>
      </interface-functions>
    </interface></specification><referenced><interface loc="24:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc" name="Counter" provided="1" ref="0x2ace833cd020">
      <component-ref nicename="tos.platforms.mica.CounterThree16C" qname="CounterThree16C"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Counter" ref="0x2ace833cd020" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TThree" ref="0x2ace81a8bd70"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x2ace810e0b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2ace833cdd70" scoped=""/>
        <function-ref name="clearOverflow" ref="0x2ace833cc6b8" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x2ace833cc230" scoped=""/>
        <function-ref name="overflow" ref="0x2ace833ccb40" scoped=""/>
      </interface-functions>
    </interface><interface loc="62:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc" name="Counter" provided="1" ref="0x2ace8346fc50">
      <component-ref nicename="tos.lib.timer.TransformCounterC" qname="CounterMicro32C.Transform32"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Counter" ref="0x2ace8346fc50" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TMicro" ref="0x2ace81a46788"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x2ace810e1608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2ace8346d9f0" scoped=""/>
        <function-ref name="clearOverflow" ref="0x2ace8346c330" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x2ace8346de78" scoped=""/>
        <function-ref name="overflow" ref="0x2ace8346c7b8" scoped=""/>
      </interface-functions>
    </interface><interface loc="63:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc" name="CounterFrom" provided="0" ref="0x2ace8346ce20">
      <component-ref nicename="tos.lib.timer.TransformCounterC" qname="CounterMicro32C.Transform32"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="CounterFrom" ref="0x2ace8346ce20" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TThree" ref="0x2ace81a8bd70"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x2ace810e0b98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2ace8346bbe8" scoped=""/>
        <function-ref name="clearOverflow" ref="0x2ace83469548" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x2ace834690c0" scoped=""/>
        <function-ref name="overflow" ref="0x2ace834699d0" scoped=""/>
      </interface-functions>
    </interface><component loc="54(CounterMicro32C.Transform32):/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc" nicename="tos.lib.timer.TransformCounterC" qname="CounterMicro32C.Transform32">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/TransformCounterC.nc">
        <short>
 TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>
 TransformCounterC decreases precision and/or widens an Counter.

 &lt;p&gt;See TEP102 for more details.

 @param to_precision_tag A type indicating the precision of the transformed
   Counter.
 @param to_size_type The type for the width of the transformed Counter.
 @param from_precision_tag A type indicating the precision of the original
   Counter.
 @param from_size_type The type for the width of the original Counter.
 @param bit_shift_right Original time units will be 2 to the power 
   &lt;code&gt;bit_shift_right&lt;/code&gt; larger than transformed time units.
 @param upper_count_type A type large enough to store the upper bits --
   those needed above from_size_type after its shift right to fill
   to_size_type.

 @author Cory Sharp &lt;cssharp@eecs.berkeley.edu&gt;
</long>
      </documentation>
      <instance number="1">
        <component-ref nicename="tos.lib.timer.TransformCounterC" qname="TransformCounterC"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TMicro" ref="0x2ace81a46788"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x2ace810e1608"/></typename>
          </type-int>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x2ace81a46430"/>
            <typename><typedef-ref name="TThree" ref="0x2ace81a8bd70"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x2ace810e0b98"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int alignment="I:1" cname="int" size="I:2"/>
          </value>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x2ace81a89630"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component><component loc="22:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc" nicename="tos.platforms.mica.CounterThree16C" qname="CounterThree16C">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
        <short>
 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>
 16-bit microsecond Counter component as per TEP102 HAL guidelines. The
 mica family microsecond clock is built on hardware timer 3, and actually
 runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() 
 command to figure out the exact frequency.

 @author David Gay &lt;dgay@intel-research.net&gt;
</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="31:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
          <from><interface-ref name="Counter" ref="0x2ace833cd020" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x2ace83479020" scoped=""/></to>
        </wire>
        <wire loc="32:/opt/tinyos-2.1.2/tos/platforms/mica/CounterThree16C.nc">
          <from><interface-ref name="Timer" ref="0x2ace834760e0" scoped=""/></from>
          <to><interface-ref name="Timer" ref="0x2ace833cac30" scoped=""/></to>
        </wire>
      </wiring>
    </component></referenced></component>